name: Client Pull Request CI & Automation

on:
  pull_request:
    branches: [main, develop]

env:
  PROJECT_OWNER: 'Olliver-0'
  PROJECT_NUMBER: 2
  STATUS_FIELD_NAME: 'Status'
  STATUS_VALUE_NAME: 'Review'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Check production build
        run: npm run build
  add-to-project-board:
    name: Adicionar ao Quadro de Projetos
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      issues: read

    steps:
      - name: Encontrar issue vinculada na PR
        id: find_issue
        run: |
          issue_number=$(echo "${{ github.event.pull_request.body }}" | grep -oP "(?i)(?:closes|fixes|resolves|relates to) #\K\d+")
          echo "issue_number=$issue_number" >> $GITHUB_OUTPUT

      - name: Obter IDs do Projeto e do Campo de Status
        id: project_data
        run: |
          gh_query=$(cat << 'QUERY'
          query getProject($owner: String!, $projectNumber: Int!, $statusFieldName: String!, $statusValueName: String!) {
            owner_type: repositoryOwner(login: $owner) {
              ... on User {
                projectV2(number: $projectNumber) {
                  id
                  field(name: $statusFieldName) {
                    ... on ProjectV2SingleSelectField {
                      id
                      options(names: [$statusValueName]) {
                        id
                      }
                    }
                  }
                }
              }
              ... on Organization {
                projectV2(number: $projectNumber) {
                  id
                  field(name: $statusFieldName) {
                    ... on ProjectV2SingleSelectField {
                      id
                      options(names: [$statusValueName]) {
                        id
                      }
                    }
                  }
                }
              }
            }
          }
          QUERY
          )

          response=$(gh api graphql -f query="$gh_query" \
            -F owner="$PROJECT_OWNER" \
            -F projectNumber="$PROJECT_NUMBER" \
            -F statusFieldName="$STATUS_FIELD_NAME" \
            -F statusValueName="$STATUS_VALUE_NAME")

          project_id=$(echo "$response" | jq -r '.data.owner_type.projectV2.id')
          status_field_id=$(echo "$response" | jq -r '.data.owner_type.projectV2.field.id')
          status_option_id=$(echo "$response" | jq -r '.data.owner_type.projectV2.field.options[0].id')

          echo "project_id=$project_id" >> $GITHUB_OUTPUT
          echo "status_field_id=$status_field_id" >> $GITHUB_OUTPUT
          echo "status_option_id=$status_option_id" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.COLOPHON_PROJECT_ACTION }}
          PROJECT_OWNER: ${{ env.PROJECT_OWNER }}
          PROJECT_NUMBER: ${{ env.PROJECT_NUMBER }}
          STATUS_FIELD_NAME: ${{ env.STATUS_FIELD_NAME }}
          STATUS_VALUE_NAME: ${{ env.STATUS_VALUE_NAME }}

      - name: Adicionar PR ao Projeto e Definir Status
        run: |
          add_item_query=$(cat << 'QUERY'
          mutation($projectId: ID!, $contentId: ID!) {
            addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
              item {
                id
              }
            }
          }
          QUERY
          )

          new_item_id=$(gh api graphql -f query="$add_item_query" \
            -F projectId='${{ steps.project_data.outputs.project_id }}' \
            -F contentId='${{ github.event.pull_request.node_id }}' | jq -r '.data.addProjectV2ItemById.item.id')

          set_status_query=$(cat << 'QUERY'
          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: ID!) {
            updateProjectV2ItemFieldValue(input: {
              projectId: $projectId,
              itemId: $itemId,
              fieldId: $fieldId,
              value: { singleSelectOptionId: $optionId }
            }) {
              item {
                id
              }
            }
          }
          QUERY
          )

          gh api graphql -f query="$set_status_query" \
            -F projectId='${{ steps.project_data.outputs.project_id }}' \
            -F itemId="$new_item_id" \
            -F fieldId='${{ steps.project_data.outputs.status_field_id }}' \
            -F optionId='${{ steps.project_data.outputs.status_option_id }}'
        env:
          GH_TOKEN: ${{ secrets.COLOPHON_PROJECT_ACTION }}

      - name: Adicionar Issue ao Projeto e Definir Status
        if: steps.find_issue.outputs.issue_number
        run: |
          get_issue_id_query=$(cat << 'QUERY'
          query($owner: String!, $repo: String!, $issueNumber: Int!) {
            repository(owner: $owner, name: $repo) {
              issue(number: $issueNumber) {
                id
              }
            }
          }
          QUERY
          )

          issue_node_id=$(gh api graphql -f query="$get_issue_id_query" \
            -F owner='${{ github.repository_owner }}' \
            -F repo='${{ github.event.repository.name }}' \
            -F issueNumber=${{ steps.find_issue.outputs.issue_number }} | jq -r '.data.repository.issue.id')

          add_item_query=$(cat << 'QUERY'
          mutation($projectId: ID!, $contentId: ID!) {
            addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
              item {
                id
              }
            }
          }
          QUERY
          )

          new_item_id=$(gh api graphql -f query="$add_item_query" \
            -F projectId='${{ steps.project_data.outputs.project_id }}' \
            -F contentId="$issue_node_id" | jq -r '.data.addProjectV2ItemById.item.id')

          set_status_query=$(cat << 'QUERY'
          mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: ID!) {
            updateProjectV2ItemFieldValue(input: {
              projectId: $projectId,
              itemId: $itemId,
              fieldId: $fieldId,
              value: { singleSelectOptionId: $optionId }
            }) {
              item {
                id
              }
            }
          }
          QUERY
          )

          gh api graphql -f query="$set_status_query" \
            -F projectId='${{ steps.project_data.outputs.project_id }}' \
            -F itemId="$new_item_id" \
            -F fieldId='${{ steps.project_data.outputs.status_field_id }}' \
            -F optionId='${{ steps.project_data.outputs.status_option_id }}'
        env:
          GH_TOKEN: ${{ secrets.COLOPHON_PROJECT_ACTION }}
